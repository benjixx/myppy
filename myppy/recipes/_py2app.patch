diff -rauN py2app-0.7.1/py2app/build_app.py patched-py2app-0.7.1/py2app/build_app.py
--- py2app-0.7.1/py2app/build_app.py	2012-10-26 23:33:45.000000000 +1100
+++ patched-py2app-0.7.1/py2app/build_app.py	2012-12-05 11:40:23.000000000 +1100
@@ -82,13 +82,13 @@
         super(PythonStandalone, self).__init__(*args, **kwargs)
         self.appbuilder = appbuilder
 
-    def copy_dylib(self, src):
+    def copy_dylib(self, src, loader_path=None):
         dest = os.path.join(self.dest, os.path.basename(src))
         if os.path.islink(src):
             dest = os.path.join(self.dest, os.path.basename(os.path.realpath(src)))
         else:
             dest = os.path.join(self.dest, os.path.basename(src))
-        return self.appbuilder.copy_dylib(src, dest)
+        return self.appbuilder.copy_dylib(src, dest, loader_path)
 
     def copy_framework(self, info):
         destfn = self.appbuilder.copy_framework(info, self.dest)
@@ -453,6 +453,7 @@
         except ValueError:
             info = None
         else:
+            fmwk = os.path.normpath(fmwk)
             info = macholib.dyld.framework_info(fmwk)
 
         if info is not None:
@@ -897,6 +898,7 @@
             if self.semi_standalone:
                 self.symlink(sys.executable, execdst)
             else:
+                execsrc = sys.executable
                 if os.path.exists(os.path.join(sys.prefix, ".Python")):
                     fn = os.path.join(sys.prefix, "lib", "python%d.%d"%(sys.version_info[:2]), "orig-prefix.txt")
                     if os.path.exists(fn):
@@ -912,13 +914,15 @@
                         # that we don't want use, we need the executable in Resources/Python.app
                         dpath = os.path.join(prefix, 'Resources', 'Python.app', 'Contents', 'MacOS')
                         self.copy_file(os.path.join(dpath, PYTHONFRAMEWORK), execdst)
+                        execsrc = os.path.join(dpath, PYTHONFRAMEWORK)
 
 
                     else:
-                        self.copy_file(os.path.join(prefix, rest_path), execdst)
+                        execsrc = os.path.join(prefix, rest_path)
+
+                self.copy_file(execsrc, execdst)
+                macholib.MachOStandalone.rewrite_loader_path(execdst, execsrc)
 
-                else:
-                    self.copy_file(sys.executable, execdst)
             if not self.debug_skip_macholib:
                 mm = PythonStandalone(self, dst, executable_path=exp)
                 dylib, runtime = self.get_runtime()
@@ -1035,11 +1039,12 @@
         log.info('stripping saved %d bytes (%d / %d)',
             unstripped - stripped, stripped, unstripped)
 
-    def copy_dylib(self, src, dst):
+    def copy_dylib(self, src, dst, loader_path=None):
         # will be copied from the framework?
         if src != sys.executable:
             force, self.force = self.force, True
             self.copy_file(src, dst)
+            macholib.MachOStandalone.rewrite_loader_path(dst, src)
             self.force = force
         return dst
 
@@ -1707,6 +1712,8 @@
             )
             self.mkpath(os.path.dirname(fn))
             copy_file(copyext.filename, fn, dry_run=self.dry_run)
+            if not self.dry_run:
+                macholib.MachOStandalone.rewrite_loader_path(fn, copyext.filename)
 
         if 0 and sys.version_info[:2] >= (3, 2) and not self.alias:
             import encodings
diff -rauN py2app-0.7.1/py2app/util.py patched-py2app-0.7.1/py2app/util.py
--- py2app-0.7.1/py2app/util.py	2012-10-16 22:46:47.000000000 +1100
+++ patched-py2app-0.7.1/py2app/util.py	2012-12-03 22:58:41.000000000 +1100
@@ -5,6 +5,7 @@
 from modulegraph.util import *
 from modulegraph import zipio
 import macholib.util
+import macholib.MachOStandalone
 import warnings
 from distutils import log
 
@@ -630,3 +631,7 @@
 
 def mapc(src, dst):
     subprocess.check_call([_get_tool('mapc'), src, dst])
+
+
+def rewrite_loadr_path(newpath, oldpath):
+    return macholib.MachoOStandalone.rewrite_loader_path(newpath, oldpath)
